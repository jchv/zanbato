// Code generated by "stringer -type=UnaryOp,BinaryOp -output expr_string.go"; DO NOT EDIT.

package expr

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[InvalidUnaryOp-0]
	_ = x[OpLogicalNot-1]
}

const _UnaryOp_name = "InvalidUnaryOpOpLogicalNot"

var _UnaryOp_index = [...]uint8{0, 14, 26}

func (i UnaryOp) String() string {
	if i < 0 || i >= UnaryOp(len(_UnaryOp_index)-1) {
		return "UnaryOp(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _UnaryOp_name[_UnaryOp_index[i]:_UnaryOp_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[InvalidBinaryOp-0]
	_ = x[OpAdd-1]
	_ = x[OpSub-2]
	_ = x[OpMult-3]
	_ = x[OpDiv-4]
	_ = x[OpMod-5]
	_ = x[OpLessThan-6]
	_ = x[OpLessThanEqual-7]
	_ = x[OpGreaterThan-8]
	_ = x[OpGreaterThanEqual-9]
	_ = x[OpEqual-10]
	_ = x[OpNotEqual-11]
	_ = x[OpShiftLeft-12]
	_ = x[OpShiftRight-13]
	_ = x[OpBitAnd-14]
	_ = x[OpBitOr-15]
	_ = x[OpBitXor-16]
	_ = x[OpLogicalAnd-17]
	_ = x[OpLogicalOr-18]
}

const _BinaryOp_name = "InvalidBinaryOpOpAddOpSubOpMultOpDivOpModOpLessThanOpLessThanEqualOpGreaterThanOpGreaterThanEqualOpEqualOpNotEqualOpShiftLeftOpShiftRightOpBitAndOpBitOrOpBitXorOpLogicalAndOpLogicalOr"

var _BinaryOp_index = [...]uint8{0, 15, 20, 25, 31, 36, 41, 51, 66, 79, 97, 104, 114, 125, 137, 145, 152, 160, 172, 183}

func (i BinaryOp) String() string {
	if i < 0 || i >= BinaryOp(len(_BinaryOp_index)-1) {
		return "BinaryOp(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _BinaryOp_name[_BinaryOp_index[i]:_BinaryOp_index[i+1]]
}
