// Code generated by "stringer -type=Kind"; DO NOT EDIT.

package kaitai

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[U1-1]
	_ = x[U2-2]
	_ = x[U2le-3]
	_ = x[U2be-4]
	_ = x[U4-5]
	_ = x[U4le-6]
	_ = x[U4be-7]
	_ = x[U8-8]
	_ = x[U8le-9]
	_ = x[U8be-10]
	_ = x[S1-11]
	_ = x[S2-12]
	_ = x[S2le-13]
	_ = x[S2be-14]
	_ = x[S4-15]
	_ = x[S4le-16]
	_ = x[S4be-17]
	_ = x[S8-18]
	_ = x[S8le-19]
	_ = x[S8be-20]
	_ = x[Bits-21]
	_ = x[F4-22]
	_ = x[F4le-23]
	_ = x[F4be-24]
	_ = x[F8-25]
	_ = x[F8le-26]
	_ = x[F8be-27]
	_ = x[Bytes-28]
	_ = x[String-29]
	_ = x[User-30]
	_ = x[UntypedInt-31]
}

const _Kind_name = "U1U2U2leU2beU4U4leU4beU8U8leU8beS1S2S2leS2beS4S4leS4beS8S8leS8beBitsF4F4leF4beF8F8leF8beBytesStringUserUntypedNum"

var _Kind_index = [...]uint8{0, 2, 4, 8, 12, 14, 18, 22, 24, 28, 32, 34, 36, 40, 44, 46, 50, 54, 56, 60, 64, 68, 70, 74, 78, 80, 84, 88, 93, 99, 103, 113}

func (i Kind) String() string {
	i -= 1
	if i < 0 || i >= Kind(len(_Kind_index)-1) {
		return "Kind(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _Kind_name[_Kind_index[i]:_Kind_index[i+1]]
}
