package golang

import (
	"testing"

	"github.com/jchv/zanbato/kaitai"
	"github.com/stretchr/testify/assert"
)

func Test(t *testing.T) {
	tests := []struct {
		Name   string
		Struct *kaitai.Struct
		Source string
	}{
		{
			Name:   "EmptyStruct",
			Struct: &kaitai.Struct{ID: "empty"},
			Source: `// Generated by Zanbato. Do not edit!

package test

`,
		},
		{
			Name: "NestedEmpty",
			Struct: &kaitai.Struct{
				ID: "nested_empty",
				Structs: []*kaitai.Struct{
					{ID: "subtype_a", Doc: "Nested A"},
					{ID: "subtype_b", Doc: "Nested B"},
				},
			},
			Source: `// Generated by Zanbato. Do not edit!

package test

`,
		},
		{
			Name: "Enums",
			Struct: &kaitai.Struct{
				ID: "enums",
				Enums: []*kaitai.Enum{
					{ID: "enum_a", Values: []kaitai.EnumValue{{Value: 0, ID: "value1"}, {Value: 1, ID: "value2"}}},
					{ID: "enum_b", Values: []kaitai.EnumValue{{Value: 0, ID: "b0"}, {Value: 1, ID: "b1"}}},
				},
			},
			Source: `// Generated by Zanbato. Do not edit!

package test

type Enums_EnumA int
const (
	Enums_EnumA__Value1 Enums_EnumA = 0
	Enums_EnumA__Value2 Enums_EnumA = 1
)

type Enums_EnumB int
const (
	Enums_EnumB__B0 Enums_EnumB = 0
	Enums_EnumB__B1 Enums_EnumB = 1
)

`,
		},
		{
			Name: "Attrs",
			Struct: &kaitai.Struct{
				ID: "attrs",
				Seq: []*kaitai.Attr{
					{ID: "magic", Size: kaitai.MustParseExpr("4"), Contents: []byte{0x7f, 'E', 'L', 'F'}},
					{ID: "count", Type: kaitai.Type{Kind: kaitai.S8le}},
					// TODO: implement repeated fields.
					// {ID: "entries", Type: kaitai.Type{Kind: kaitai.S2le}, Repeat: kaitai.RepeatExpr{CountExpr: kaitai.MustParseExpr("count")}},
				},
			},
			Source: `// Generated by Zanbato. Do not edit!

package test

import (
	kaitai "github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
)

type Attrs struct {
	magic uint8
	count int64
}

func (this *Attrs) Read(io *kaitai.Stream) (err error) {
	tmp1, err := io.ReadU1()
	if err != nil {
		return err
	}
	this.magic = tmp1
	tmp2, err := io.ReadS8le()
	if err != nil {
		return err
	}
	this.count = tmp2
}

`,
		},
	}

	for _, test := range tests {
		artifacts := NewEmitter("test").Emit(test.Struct)
		assert.Equal(t, test.Source, string(artifacts[0].Body))
	}
}
